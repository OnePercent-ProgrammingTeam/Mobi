# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI and CD with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ${{matrix.os}} #Run the application in the Operating Systems, specified in the matrix below
    strategy: 
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest] 

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    #- name: Update dependency graph
    #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

    # Build a JAR file
    
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: docker-application-1.0-SNAPSHOT-jar-with-dependencies.jar
        path: target/docker-application-1.0-SNAPSHOT-jar-with-dependencies.jar

  # Deployment of our project

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: docker-application-1.0-SNAPSHOT-jar-with-dependencies.jar
        path: target/

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # We didn't include the following to store our project as a docker image because we didn't have the time to delve deeper into it.
    # Perhaps in the future we may add it.
    #- name: Build and Push Docker Image
      #uses: mr-smithers-excellent/docker-build-push@v4
      #with:
        #image: docker-hub-repo/image-name          // Change the docker hub repo and the image name with the actual ones
        #registry: docker.io
        #username: (Needs the Dollar Symbol){{ secrets.DOCKER_USERNAME }}   // Set in GitHub in the SECRETS the DOCKER_USERNAME
        #password: (Needs the Dollar Symbol){{ secrets.DOCKER_PASSWORD }}   // Set in GitHub in the SECRETS the DOCKER-PASSWORD

     
    # Deployment History
    - name: Log deployment history
      run: echo 'Deployment History:$(date)' >> deployment-history.txt 

    # Custom Deployment Protection Rules
    - name: Check deployment authorization
      run: |
         authorized_users=("Cristian-Scobioala" "DionisiaK4" "andreascha" "zoilimperi" "Andreas983" "dimintzi" "crissel04" "xrusamitsakou")

         if [[ ! " ${authorized_users[@]} " =~ " $GITHUB_ACTOR " ]]; then
           echo "Deployment aborted. Only authorized users can deploy."
           exit 1
         else
           echo "Deployment authorized for user: $GITHUB_ACTOR"
         fi


    # Environment-Specific Steps
    - name: Deploy to Dev Environment
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to Dev environment..."
        
        cd target/  # Navigate to the directory where our project's artifacts are stored
  
        # Run our Java application by the jar file

        java -jar docker-application-1.0-SNAPSHOT-jar-with-dependencies.jar

    
   

      
